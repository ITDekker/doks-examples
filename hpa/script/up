#!/usr/bin/env bash
DEBUG=${DEBUG:-}
if [ ! -z "${DEBUG}" ]; then
    set -x
fi
TEST=${TEST:-}
NAMESPACE=${NAMESPACE:-hpa}
set -euo pipefail
mkdir -p tmp

# Grab the cluster name with a default of "hpa-demo".
CLUSTER_NAME=${1:-hpa-demo}

# Create the cluster or use the existing.
../script/create-cluster ${CLUSTER_NAME}

# Grab the cluster kubeconfig.
export KUBECONFIG="tmp/${CLUSTER_NAME}-kubeconfig.yaml"

# Install metrics-server and Helm/tiller.
(
    cd ../metrics-server
    script/up ${CLUSTER_NAME}
)

# Install workload that uses some CPU.
WORKLOAD_NAME="example-hpa"
kubectl create namespace ${NAMESPACE} || true
kubectl apply -f deployment.yaml -n ${NAMESPACE}
kubectl apply -f service.yaml -n ${NAMESPACE}
kubectl wait --for=condition=Available deployment/${WORKLOAD_NAME} -n ${NAMESPACE} --timeout=120s

# Enable HPA on the workload.
kubectl apply -f hpa.yaml -n ${NAMESPACE}
kubectl get hpa -n ${NAMESPACE}

# Generate some load on the deployment.
echo "Spinning up a load generator pod"
kubectl delete deployment load-generator -n ${NAMESPACE} || true
kubectl apply -n ${NAMESPACE} -f load-generator.yaml

# Wait for replicas to be scaled up.
echo "Waiting for replicas to be scaled up"
kubectl get hpa ${WORKLOAD_NAME} -n ${NAMESPACE}
while [ "$(kubectl get hpa ${WORKLOAD_NAME} -n ${NAMESPACE} -ojsonpath='{.status.currentReplicas}')" != "10" ]; do
    sleep 10
    kubectl get hpa ${WORKLOAD_NAME} -n ${NAMESPACE}
done

# Stop the load generator pod.
echo "Deleting the load generator pod"
kubectl delete deployment load-generator -n ${NAMESPACE}

# Wait for replicas to be scaled down.
echo "Waiting for replicas to be scaled down"
while [ "$(kubectl get hpa ${WORKLOAD_NAME} -n ${NAMESPACE} -ojsonpath='{.status.currentReplicas}')" == "10" ]; do
    sleep 10
    kubectl get hpa ${WORKLOAD_NAME} -n ${NAMESPACE}
done

# Success.
echo "Looks good, ðŸŽ‰"
#!/usr/bin/env bash
DEBUG=${DEBUG:-}
if [ ! -z "${DEBUG}" ]; then
    set -x
fi
TEST=${TEST:-}
HELM_VALUES=${HELM_VALUES:-values.yaml}
NAMESPACE=${NAMESPACE:-prometheus}
set -euo pipefail
mkdir -p tmp

# Grab the cluster name with a default of "prometheus-demo".
CLUSTER_NAME=${1:-prometheus-demo}

# Create the cluster or use the existing.
NODE_SIZE="s-2vcpu-4gb" ../script/create-cluster ${CLUSTER_NAME}

# Grab the cluster kubeconfig.
export KUBECONFIG="tmp/${CLUSTER_NAME}-kubeconfig.yaml"

# Install metrics-server and Helm/tiller.
(
    cd ../metrics-server
    script/up ${CLUSTER_NAME}
)

# Install Prometheus with Grafana.
helm upgrade prometheus --install --namespace ${NAMESPACE} -f ${HELM_VALUES} stable/prometheus-operator
echo "Waiting for pods to be Ready"
kubectl wait --for=condition=Ready pods -l "release=prometheus" -n ${NAMESPACE} --timeout=300s

# Forward the Grafana port for our dashboards.
echo "ðŸŽ‰"
echo "Grafana: http://localhost:8000/"
echo "kubectl port-forward -n ${NAMESPACE} svc/prometheus-grafana 8000:80"
if [ -z "${TEST}" ]; then
    kubectl port-forward -n ${NAMESPACE} svc/prometheus-grafana 8000:80
fi
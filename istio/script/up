#!/usr/bin/env bash
DEBUG=${DEBUG:-}
if [ ! -z "${DEBUG}" ]; then
    set -x
fi
TEST=${TEST:-}
set -euo pipefail
mkdir -p tmp

# Grab the cluster name with a default of "istio-demo".
CLUSTER_NAME=${1:-istio-demo}

# Create the cluster or use the existing.
NODE_SIZE="s-2vcpu-4gb" ../script/create-cluster ${CLUSTER_NAME}

# Grab the cluster kubeconfig.
export KUBECONFIG="tmp/${CLUSTER_NAME}-kubeconfig.yaml"

# Install metrics-server and Helm/tiller.
(
    cd ../metrics-server
    script/up ${CLUSTER_NAME}
)

# Install Istio with Grafana.
ISTIO_NAMESPACE="istio-system"
ISTIO_PATH=$(pwd)/tmp/istio
if [ ! -d ${ISTIO_PATH} ]; then
    (
        cd $(dirname ${ISTIO_PATH})
        git clone https://github.com/istio/istio.git
    )
fi
kubectl create namespace ${ISTIO_NAMESPACE} || true
helm upgrade istio-init --install ${ISTIO_PATH}/install/kubernetes/helm/istio-init --namespace ${ISTIO_NAMESPACE}
echo "Waiting for Istio CRDs to be created"
kubectl wait --for=condition=Complete jobs -n ${ISTIO_NAMESPACE} --all --timeout 120s
helm upgrade istio --install ${ISTIO_PATH}/install/kubernetes/helm/istio --namespace ${ISTIO_NAMESPACE} --values ${ISTIO_PATH}/install/kubernetes/helm/istio/values-istio-demo.yaml --set grafana.enabled=true
kubectl scale deployment -n istio-system istio-policy istio-galley istio-ingressgateway istio-sidecar-injector --replicas 2
kubectl wait --for=condition=Ready pods -l "release=istio" -n ${ISTIO_NAMESPACE} --timeout=120s

# Install the BookInfo demo app.
DEMO_NAMESPACE="bookinfo"
kubectl create namespace ${DEMO_NAMESPACE} || true
kubectl label namespace ${DEMO_NAMESPACE} istio-injection=enabled --overwrite
kubectl apply -f ${ISTIO_PATH}/samples/bookinfo/platform/kube/bookinfo.yaml -n ${DEMO_NAMESPACE}
kubectl wait --for=condition=Ready pods -l "app=ratings" -n ${DEMO_NAMESPACE} --timeout=120s
kubectl apply -f ${ISTIO_PATH}/samples/bookinfo/networking/bookinfo-gateway.yaml -n ${DEMO_NAMESPACE}

# Wait for istio ingress gateway to have a LB IP.
echo "Waiting for istio-ingressgateway LB service to have an IP"
../script/wait-for-service-lb istio-ingressgateway ${ISTIO_NAMESPACE}

# Grab ingress gateway LB URL.
GATEWAY_URL="$(kubectl get svc istio-ingressgateway -n ${ISTIO_NAMESPACE} -ojsonpath='{.status.loadBalancer.ingress[0].ip}')"
ENDPOINT="http://${GATEWAY_URL}/productpage"
echo "Waiting for ${ENDPOINT} to return OK 200"
timeout 120 bash -c "while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' ${ENDPOINT})" != '200' ]]; do sleep 5; done" || false
echo "curl -s ${ENDPOINT}"
curl -s ${ENDPOINT} | grep -o "<title>.*</title>"
echo "BookInfo demo: ${ENDPOINT}"

# Forward the Grafana port for our dashboards.
echo "Grafana: http://localhost:3000/"
echo "- Username: $(kubectl get secret grafana -n ${ISTIO_NAMESPACE} -ojsonpath='{.data.admin-user}' | base64 --decode)"
echo "- Password: $(kubectl get secret grafana -n ${ISTIO_NAMESPACE} -ojsonpath='{.data.admin-password}' | base64 --decode)"
echo "ðŸŽ‰"
echo "kubectl port-forward -n ${ISTIO_NAMESPACE} svc/grafana 3000:3000"
if [ -z "${TEST}" ]; then
    kubectl port-forward -n ${ISTIO_NAMESPACE} svc/grafana 3000:3000
fi
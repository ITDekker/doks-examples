#!/usr/bin/env bash
DEBUG=${DEBUG:-}
if [ ! -z "${DEBUG}" ]; then
    set -x
fi
if [ -z "${1}" ]; then
    echo "usage: create-cluster <cluster-name>"
    exit 1
fi
set -euo pipefail

NAME="${1}"
REGION="${REGION:-sfo2}"
NODE_SIZE="${NODE_SIZE:-s-1vcpu-2gb}"
NODE_COUNT="${NODE_COUNT:-2}"
VERSION="${CLUSTER_VERSION:-1.14.2-do.0}"

# Retries a command on failure.
# $1 - the max number of attempts
# $2... - the command to run
retry() {
    local -r -i max_attempts="$1"; shift
    local -r cmd="$@"
    local -i attempt_num=1

    until $cmd
    do
        if (( attempt_num == max_attempts ))
        then
            echo "Attempt $attempt_num failed and there are no more attempts left!"
            return 1
        else
            echo "Attempt $attempt_num failed! Trying again in $attempt_num seconds..."
            sleep $(( attempt_num++ ))
        fi
    done
}

export KUBECONFIG="$(pwd)/tmp/${NAME}-kubeconfig.yaml"

function save_kubeconfig() {
    mkdir -p tmp
    doctl k8s cluster kubeconfig show ${1} > ${KUBECONFIG} 2>&1
    echo "KUBECONFIG=${KUBECONFIG}"
}

# Check for existence of the cluster and create if necessary.
echo "Cluster: ${NAME}"
if retry 5 doctl k8s cluster get ${NAME} &> /dev/null; then
    echo "Cluster ${NAME} exists already, using it"
    retry 3 save_kubeconfig ${NAME}
else
    # Create the cluster.
    echo "Creating cluster ${NAME}"
    retry 3 doctl k8s cluster create ${NAME} \
        --region ${REGION} \
        --node-pool "name=${NAME};size=${NODE_SIZE};count=${NODE_COUNT}" \
        --version ${VERSION} \
        --update-kubeconfig=false

    # Grab the cluster kubeconfig.
    retry 3 save_kubeconfig ${NAME}

    # Wait for all the nodes to be Ready.
    echo "Waiting for nodes to be up and Ready"
    while ! kubectl get nodes; do
        sleep 5
    done
    while [ "$(kubectl get nodes | wc -l | tr -d '[:space:]')" == "0" ]; do
        sleep 5
    done
    kubectl wait --for=condition=Ready nodes --all --timeout=300s
fi
